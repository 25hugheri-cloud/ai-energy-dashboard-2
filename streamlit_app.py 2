import streamlit as st
import pandas as pd
import numpy as np
import time

# ---- Page Setup ----
st.set_page_config(
    page_title="AI Energy Efficiency Dashboard",
    page_icon="⚡",
    layout="wide"
)

st.title("⚡ Smart Energy Efficiency Dashboard")
st.markdown(
    """
    This dashboard simulates **AI-powered energy monitoring** for an apartment building.  
    The system analyzes live usage data and provides recommendations for **improving efficiency**.
    """
)

# ---- Sidebar Controls ----
st.sidebar.header("Simulation Controls")
refresh_rate = st.sidebar.slider("Refresh Rate (seconds)", 1, 10, 3)
num_apartments = st.sidebar.slider("Number of Apartments", 5, 50, 20)

# Placeholder for live updates
placeholder = st.empty()

# ---- Functions ----
def generate_power_data(n):
    now = pd.Timestamp.now()
    data = {
        "Apartment": [f"Apt {i+1}" for i in range(n)],
        "Power Usage (kW)": np.random.uniform(0.5, 5.0, n),
        "Temperature (°C)": np.random.uniform(18, 27, n),
        "Occupancy (%)": np.random.uniform(30, 100, n),
        "Timestamp": [now] * n
    }
    return pd.DataFrame(data)

def generate_ai_insights(df):
    avg_usage = df["Power Usage (kW)"].mean()
    avg_temp = df["Temperature (°C)"].mean()
    avg_occ = df["Occupancy (%)"].mean()

    suggestions = []
    if avg_usage > 3.5:
        suggestions.append("🔻 High energy usage detected. Consider dimming hallway lighting during low occupancy hours.")
    if avg_temp > 25:
        suggestions.append("🌡️ Cooling systems may be overactive. Try adjusting HVAC schedules to match occupancy.")
    if avg_occ < 50:
        suggestions.append("🏠 Low occupancy — optimize heating/cooling to occupied zones only.")
    if not suggestions:
        suggestions.append("✅ All systems are running efficiently.")
    return suggestions

# ---- Live Simulation ----
while True:
    df = generate_power_data(num_apartments)
    avg_power = df["Power Usage (kW)"].mean()
    ai_suggestions = generate_ai_insights(df)

    with placeholder.container():
        st.subheader("🏢 Real-Time Apartment Data")
        st.dataframe(df, use_container_width=True)

        st.metric("Average Power Usage (kW)", f"{avg_power:.2f}")
        st.line_chart(df.set_index("Apartment")["Power Usage (kW)"])

        st.subheader("🤖 AI Efficiency Recommendations")
        for s in ai_suggestions:
            st.write(s)

        st.caption(f"Last updated: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}")

    time.sleep(refresh_rate)
